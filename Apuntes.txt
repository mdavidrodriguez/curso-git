-----------------------
    Estados de git
-----------------------
working tree: Directorio de trabajo
Staging Area: Se crean cambios pendientes de ser enviados.
Commited: Se crea version de la aplicación.


-----------------------------
    Comandos basicos de git
------------------------------
git init -> Inicializar un repositorio de git
git status -> Nos muestra como esta actualmente nuestro repositorio.
git add . -> Pasar al Staging Area.
git commit -m "" -> Pasar cambios a Commited, los mensajes deben ser descriptivos.
git log -> Ver los commits, se puede ver el hasd del commit, fecha, autor, rama.
git checkout 51ae0ce6524 -> Viajar entre versiones del proyecto. Tener cuidado con el estado state HEAD.
git checkout master/main -> volver al ultimo commit, con el nombre de la rama.

-------------------------------------------
    Deshacer cambios y recuperar archivos
-------------------------------------------
git reset f74932750e -> Revertir los cambios que hemos hecho se moveran al directorio de trabajo, es decir se elimina el commit. 

git reset --hard f7493275 -> Todos los cambios que se hayan realizado hasta ese punto se pierde, cuidado ya que no se puede volver a recuperar. Es decir empezar desde cero.

git log --oneline -> Ver los commits en una sola linea.
rm index.html  -> Eliminar archivo, no se elimina, ya que que esta traqueado.
git restore index.html -> Recuperar archivo eliminado.
ls -a -> Ver carpeta con archivos ocultos.

--------------------------------
   Autenticación en git usando SSH
--------------------------------
git remote -v -> ver los origin
crear repositorio y crear clave ssh -> Se elige la opcion ssh y se enlaza el repositorio local al remoto.

https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent -> Se crea la clave ssh publica y privada siguiendo la documentación.
-----
Nota : Esto se deben hacer en una git bash en nuestro proyecto local de nuestro laptop, se indica la clave para confirmar las claves.
-----
luego se hace un push al repositorio enlazado: git push -u origin master/main/nombre-rama.
Se aceptan las condiciones en el push escribiendo yes.

- Se accede a la carpeta que creo git en nuestro directorio raiz del equipo : cd .ssh

-listar claves: Publica y privada con ls

- se muestra la clave publica: cat id_ed25519.pub --> la segunda clave corresponde a la publica. Utilizar esa.
- Se añaden esas claves en la configuración de nuestra cuenta de git hub.git
- finalmente se realiza el git push -u origin master/main/nombre-rama y este solicitara la clave privada, se le ingresa y nuestra proyecto se subira al repositorio.

---Comandos para que no solicite la clave al clonar hasta que cierre la bash.
eval "$(ssh-agent -s)"
ssh-add ~/.ssh/id_ed25519

rm -rf curso-git/ -> Borrar proyecto versionado en git.

---------------------------
    Pull request - Ramas
---------------------------
Crear una bifurcación de la rama principal
git checkout -b nombre-rama  -> Crear rama y cambiar inmediatamente a ella.
ejemplo: 
    git checkout -b feature-posts-styles

git branch -> Ver rama donde nos encontramos y las disponibles.

git push -u origin feature-posts-styles -> Enviar cambios de la nueva rama e inmediatamente crear la rama en el repositorio remoto.

Se puede realizar pull request y merge en el remoto usando la interfaz.

git pull -> Bajar los cambios que hemos hecho en el repositorio remoto al local.


--------------------------------------
    Trabajar con varias ramas
--------------------------------------

--Luego de hacer el pull request, realizamos el merge y finalmente bajamos esos cambios en localñ con git pull.


------------------------------------
    Mezclar ramas en local
------------------------------------
Creamos una rama local y le agregamos cambios.

Luego a esa rama le hacemos un commit.

Posteriormente nos movemos a la rama a la cual queremos agregar esos nuevos cambios hechos en la rama nueva.
Comandos Ejemplos:
    git checkout feature-load-adds-from-api -> Rama nueva
    git add . -> Pasamos los cambios al staging Area
    git commit -m "Create load adds function" -> Pasamos del staging area al commited.
    git checkout feature-adds -> Nos movemos a la otra rama donde queremos hacer el merge.
    git merge feature-load-adds-from-api -> hacemos un merge de la rama nueva a la anterior.
    git checkout master --> Nos movemos a la rama principal.
    git merge feature-adds -> Añadimos los cambios de la rama que tuvo los cambios de la otra rama y la unimos a la principal.
    
git log --graph --oneline -> Ver el sistema de ramas en local. El arbol de los merge que se realizaron.


---------------------------------------
    Hacer un fork y añadir cambios
---------------------------------------

git checkout -b bugfix-3-only-2-comments

